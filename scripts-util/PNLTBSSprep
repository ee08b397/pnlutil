#!/usr/bin/env python
"""
Makes DTI scalar measure images and masks them.  Outputs all have the same na
and are placed in folders based on image type.  Flexibly can take several combin of DTI, DWI, mask.

Dependencies:
 - tend estim
 - ConvertBetweenFileFormats
 - bet
 - bse.sh
"""

import os
import sys
import tempfile
from glob import glob
import re
import platform
from subprocess import call

SCRIPTDIR = os.path.dirname(os.path.realpath(__file__))

#t('DiffusionTensorEstimation '+dwi+' tensor.nrrd baseline.nrrd OtsuMask.nrrd --removeislands --shiftNeg -e WLS')
# def dwi2dti(dwi, out_dti, out_bse, mask=None):
#     plat = platform.system()
#     if plat == 'Darwin':
#         cmd = "DWItoDTIEstimation -e WLS --shiftNeg " + dwi +" "+ out_dti +" "+ out_bse
#     else:
#         cmd =  "Slicer --launch DWItoDTIEstimation -e WLS --shiftNeg " + dwi +" "+ out_dti +" "+ out_bse
#     run_command(cmd)

def dwi2dti(dwi, dti_out, use_lls):
    if use_lls:
        # cmd = "tend estim -est lls -B kvp -knownB0 true -i " + dwi + " -o " + dti_out
        cmd = ["tend","estim","-est","lls","-B","kvp","-knownB0","true","-i",dwi,"-o",dti_out]
    else:
        # cmd = "tend estim -est wls -B kvp -knownB0 true -i " + dwi + " -o " + dti_out
        cmd = ["tend","estim","-est","wls","-B","kvp","-knownB0","true","-i",dwi,"-o",dti_out]
    run(cmd)

def run_command(cmd):
    sys.stderr.write(cmd+'\n')
    os.system(cmd)

t = run_command

def run(cmd):
    sys.stderr.write(' '.join(cmd)+'\n')
    return_code = call(cmd)
    if return_code > 0:
        print("Command returned non-zero exit status.")
        sys.exit()

def getFileDict(case):
    """Given a case string, returns a dict containing file locations"""
    return files

def unucp(invol, outvol):
    cmd = "unu save -e gzip -f nrrd -i " + invol + " -o "  + outvol
    run_command(cmd)

def tbssprep(dwi=None,
             outputfolder=None,
             tensorfile=None,
             tensormask=None,
             outputname=None,
             verbose=False,
             save_files=False,
             betf='.3',
             use_lls=False):
    """TBSS prep lots of ways"""

    if not dwi and not tensorfile:
        print "Need a DWI or DTI volume"
        return False

    if dwi:
        dwi = os.path.abspath(dwi)
    if not outputfolder:
        outputfolder = os.getcwd()

    outputfolder = os.path.abspath(outputfolder)

    if tensorfile:
        tensorfile = os.path.abspath(tensorfile)
    if tensormask:
        tensormask = os.path.abspath(tensormask)
    if dwi and not outputname:
        outputname = os.path.splitext(os.path.splitext(os.path.basename(dwi))[0])[0]
    elif tensorfile and not outputname:
        outputname = os.path.splitext(os.path.splitext(os.path.basename(tensorfile))[0])[0]
    elif outputname and '.nii' in outputname:
        outputname = re.search(r"(.*?)\.nii", outputname).group(1)
    elif outputname:
        pass
    else:
        raise Exception("Logic Error?")

    float(betf)
    print type(betf)

    # outputs:
    print 'outputname', outputname
    outputName      = outputname + '.nii.gz'
    outputFolder    = outputfolder+'/'
    FAmap           = outputFolder+'FA/'+outputName
    trace           = outputFolder+'trace/'+outputName
    radial          = outputFolder+'radial/'+outputName
    axial           = outputFolder+'axial/'+outputName
    radialOverTrace = outputFolder+'radialOverTrace/'+outputName
    axialOverTrace  = outputFolder+'axialOverTrace/'+outputName
    l2              = outputFolder+'l2/'+outputName
    l3              = outputFolder+'l3/'+outputName
    baseline        = outputFolder+'baseline/'+outputName
    mask            = outputFolder+'mask/'+outputName
    undimswappedmask= outputFolder+'mask/'+outputName
    nrrdmask        = outputFolder+'nrrdmask/'+outputName

    if not os.path.exists(outputFolder):
        os.mkdir(outputFolder)

    oldcwd = os.path.abspath('.')
    os.chdir(outputFolder)
    folders = ['FA', 'trace', 'radial', 'axial', 'radialOverTrace', 'axialOverTrace', 'mask', 'nrrdmask', 'undimswappedmask']
    for folder in folders:
        if not os.path.exists(folder):
            os.mkdir(folder)
    os.chdir(oldcwd)

    tmp = tempfile.mkdtemp()
    print '--------tmpdir ' + tmp
    os.chdir(tmp)
    print '-----------Tensor estimation--------------'
    if dwi:
        dwi2dti(dwi, 'tensor.nrrd', use_lls)
    else:
        unucp(tensorfile, 'tensor.nrrd')
    tensorIsMasked = False
    if tensormask:
        if '.nii' in tensormask:
            t('ConvertBetweenFileFormats '+tensormask+' baselinemask.nrrd')
        else:
            t('unu save -e gz -f nrrd -i '+tensormask+' -o baselinemask.nrrd')
    elif dwi:
        bse_sh = os.path.join(SCRIPTDIR,'..','scripts-all','bse.sh')
        print bse_sh
        run([bse_sh,'-i',dwi,'-o','baseline.nrrd'])
        t('ConvertBetweenFileFormats baseline.nrrd baseline.nii.gz')
        t('bet baseline.nii.gz baseline-masked.nii.gz -m -f '+betf)
        t('ConvertBetweenFileFormats baseline-masked_mask.nii.gz baselinemask.nrrd')
    else:
        assert tensorfile
        tensorIsMasked = True

    print '------------FA--------------'
    if tensorIsMasked:
        t('tend anvol -t -1 -a fa -i tensor.nrrd -o maskedFA.nrrd')
    else:
        t('tend anvol -t -1 -a fa -i tensor.nrrd -o FA.nrrd')
        t('unu 3op ifelse baselinemask.nrrd FA.nrrd 0 -o maskedFA.nrrd -t FLOAT')
    t('ConvertBetweenFileFormats maskedFA.nrrd fa.nii.gz float')
    t('fslswapdim fa RL PA IS fa')
    t('fslswapdim fa LR PA IS fa')
    t('cp fa.nii.gz '+FAmap)

    print '------------Axial --------------'
    if tensorIsMasked:
        t('tend eval -c 0 -i tensor.nrrd -o maskedAxial.nrrd')
    else:
        t('tend eval -c 0 -i tensor.nrrd -o axial.nrrd')
        t('unu 3op ifelse baselinemask.nrrd axial.nrrd 0 -o maskedAxial.nrrd -t FLOAT')
    t('ConvertBetweenFileFormats maskedAxial.nrrd axial.nii.gz float')
    t('fslswapdim axial RL PA IS axial')
    t('fslswapdim axial LR PA IS axial')
    t('cp axial.nii.gz '+axial)

    print '------------Radial --------------'
    t('tend eval -c 1 -i tensor.nrrd -o l2.nrrd')
    t('tend eval -c 2 -i tensor.nrrd -o l3.nrrd')
    t('unu 2op + l2.nrrd l3.nrrd -o tempsum.nrrd -t FLOAT')
    if tensorIsMasked:
        t('unu 2op / tempsum.nrrd 2 -o maskedRadial.nrrd -t FLOAT')
    else:
        t('unu 2op / tempsum.nrrd 2 -o radial.nrrd -t FLOAT')
        t('unu 3op ifelse baselinemask.nrrd radial.nrrd 0 -o maskedRadial.nrrd -t FLOAT')
    t('ConvertBetweenFileFormats maskedRadial.nrrd radial.nii.gz float')
    t('fslswapdim radial RL PA IS radial')
    t('fslswapdim radial LR PA IS radial')
    t('cp radial.nii.gz '+radial)

    print '------------Trace --------------'
    if tensorIsMasked:
        t('tend anvol -t -1 -a tr -i tensor.nrrd -o maskedTrace.nrrd')
    else:
        t('tend anvol -t -1 -a tr -i tensor.nrrd -o trace.nrrd')
        t('unu 3op ifelse baselinemask.nrrd trace.nrrd 0 -o maskedTrace.nrrd -t FLOAT')

    t('ConvertBetweenFileFormats maskedTrace.nrrd trace.nii.gz float')
    t('fslswapdim trace RL PA IS trace')
    t('fslswapdim trace LR PA IS trace')
    t('cp trace.nii.gz '+trace)

    print '------------Radial over Trace --------------'
    t('fslmaths radial.nii.gz -div trace.nii.gz radialOverTrace.nii.gz')
    t('fslswapdim radialOverTrace RL PA IS radialOverTrace')
    t('fslswapdim radialOverTrace LR PA IS radialOverTrace')
    t('cp radialOverTrace.nii.gz '+radialOverTrace)

    print '------------Axial over Trace --------------'
    t('fslmaths axial.nii.gz -div trace.nii.gz axialOverTrace.nii.gz')
    t('fslswapdim axialOverTrace RL PA IS axialOverTrace')
    t('fslswapdim axialOverTrace LR PA IS axialOverTrace')
    t('cp axialOverTrace.nii.gz '+axialOverTrace)

    if not tensorIsMasked:
        t('cp baselinemask.nrrd '+nrrdmask)
        t('ConvertBetweenFileFormats baselinemask.nrrd mask.nii.gz')
        t('cp mask.nii.gz '+undimswappedmask)
        t('fslswapdim mask RL PA IS mask')
        t('fslswapdim mask LR PA IS mask')
        t('cp axialOverTrace.nii.gz '+mask)

    import time
    time.sleep(1)
    if not save_files:
        if '/tmp' in tmp:
            t('rm -rf '+tmp)
    else:
        print 'temp directory:', tmp
    os.chdir(oldcwd)

def CLI():
    import argparse
    parser = argparse.ArgumentParser(description="Creates scalar images for use with TBSS.  Either DWI or Tensor file and mask are required.")
    parser.add_argument('--DWI', default=None, help='DWI image from which to calculate scalar images')
    parser.add_argument('--mask', default=None, help='Brain mask to use on all output images')
    parser.add_argument('--tensor', default=None, help='Tensor file to use instead of estimating it from a DWI')
    parser.add_argument('--folder', default=None, help='Folder to create TBSS input files folders in')
    parser.add_argument('--name', default=None, help='What to call all output files (not including extension)')
    parser.add_argument('-v', '--verbose', default=False, action='store_true', help="Print all commands as they are run")
    parser.add_argument('-d', '--debug', default=False, action='store_true', help="Run code in a debugger")
    parser.add_argument('--save_files', default=False, action='store_true', help="Don't delete temp files")
    parser.add_argument('-f', '--betf', default='.3', help='bet (brain extraction tool) -f parameter to use; default is .3')
    parser.add_argument('--lls', default=False, action='store_true', help='Use least linear squares for DTI estimation instead of weighted least squares')

    args = parser.parse_args()

    tbssprep(dwi=args.DWI,
             outputfolder=args.folder,
             tensorfile=args.tensor,
             tensormask=args.mask,
             outputname=args.name,
             verbose=args.verbose,
             save_files=args.save_files,
             betf=args.betf,
             use_lls=args.lls)

if __name__ == '__main__':
    CLI()
