#!/usr/bin/env python
"""
Makes DTI scalar measure images and masks them.  Outputs all have the same na
and are placed in folders based on image type.  Flexibly can take several combin
of DTI, DWI, mask.

category: tbss, nii, nrrd, file conversion, dti, tomb
"""

import os
import sys
import tempfile
from glob import glob
import re
import slicerTools
slicerTools.configure_libs() #enables use of Slicer tools in this script
#SLICER_INSTALL = '/projects/schiz/software/Slicer3-3.6.4-beta-2011-10-19-linux-x86_64/'
#SLICER_INSTALL = '/projects/schiz/software/Slicer3-3.6.3-beta-2010-11-03-linux-x86_64/'
#SLICER_INSTALL = '/projects/schiz/software/Slicer3-3.6.4-beta-2011-04-28-linux-x86_64/'
#SLICER_INSTALL = '/projects/schiz/software/Slicer3-3.6.1-2010-08-23-linux-x86_64/'
#SLICER_INSTALL = '/projects/schiz/software/Slicer3_forExternalLinking/'
#SLICER_INSTALL = '/projects/schiz/software/Slicer3-3.7-alpha-2010-08-24-linux-x86_64/'
#slicerTools.configure_libs(slicer_install=SLICER_INSTALL)

def run_command(cmd):
    sys.stderr.write(cmd+'\n')
    os.system(cmd)

def run_and_print_command(cmd):
    os.system(cmd)

def getFileDict(case):
    """Given a case string, returns a dict containing file locations"""
    return files

def tbssprep(dwi=None, outputfolder=None, tensorfile=None, tensormask=None, outputname=None, verbose=False, save_files=False, betf='.3', magic=True):
    """TBSS prep lots of ways"""

    if dwi:
        pass
    elif tensorfile and tensormask:
        pass
    else:
        return False

    if dwi:
        dwi = os.path.abspath(dwi)
    if outputfolder:
        outputfolder = os.path.abspath(outputfolder)
    else:
        outputfolder = os.getcwd()

    outputfolder = os.path.abspath(outputfolder)
    if tensorfile:
        tensorfile = os.path.abspath(tensorfile)
    if tensormask:
        tensormask = os.path.abspath(tensormask)
    if dwi and not outputname:
        outputname = os.path.splitext(os.path.splitext(os.path.basename(dwi))[0])[0]
    elif tensorfile and not outputname:
        outputname = os.path.splitext(os.path.splitext(os.path.basename(tensorfile))[0])[0]
    elif outputname and '.nii' in outputname:
        outputname = re.search(r"(.*?)\.nii", outputname).group(1)
    elif outputname:
        pass
    else:
        raise Exception("Logic Error?")

    float(betf)
    print type(betf)

    if verbose:
        t = run_command
    else:
        t = run_and_print_command

    # outputs:
    print 'outputname', outputname
    outputName      = outputname + '.nii.gz'
    outputFolder    = outputfolder+'/'
    FAmap           = outputFolder+'FA/'+outputName
    trace           = outputFolder+'trace/'+outputName
    radial          = outputFolder+'radial/'+outputName
    axial           = outputFolder+'axial/'+outputName
    radialOverTrace = outputFolder+'radialOverTrace/'+outputName
    axialOverTrace  = outputFolder+'axialOverTrace/'+outputName
    l2              = outputFolder+'l2/'+outputName
    l3              = outputFolder+'l3/'+outputName
    baseline        = outputFolder+'baseline/'+outputName
    mask            = outputFolder+'mask/'+outputName
    undimswappedmask= outputFolder+'mask/'+outputName
    nrrdmask        = outputFolder+'nrrdmask/'+outputName

    if not os.path.exists(outputFolder):
        os.mkdir(outputFolder)

    oldcwd = os.path.abspath('.')
    os.chdir(outputFolder)
    folders = ['FA', 'trace', 'radial', 'axial', 'radialOverTrace', 'axialOverTrace', 'mask', 'nrrdmask', 'undimswappedmask']
    for folder in folders:
        if not os.path.exists(folder):
            os.mkdir(folder)
    os.chdir(oldcwd)

    tmp = tempfile.mkdtemp()
    print '--------tmpdir ' + tmp
    os.chdir(tmp)
    #t('tend estim -i '+dwi+' -knownB0 true -B kvp -i '+dwi+' -o tensor.nrrd')
    print '-----------Tensor estimation--------------'
    if dwi:
        t('DiffusionTensorEstimation '+dwi+' tensor.nrrd baseline.nrrd OtsuMask.nrrd --removeislands --shiftNeg -e WLS')
    else:
        t('unucp '+tensorfile+' tensor.nrrd')
    print tensormask
    print 'check'
    if tensormask:
        if '.nii' in tensormask:
            if magic:
                t('ConvertBetweenFileFormats '+tensormask+' baselinemask.nrrd')
            else:
                t('ResampleVolume2 '+tensormask+' baselinemask.nrrd')
        else:
            t('unu save -e gz -f nrrd -i '+tensormask+' -o baselinemask.nrrd')
    else:
        if not dwi:
            raise Exception("Needed a dwi")
        if magic:
            t('ConvertBetweenFileFormats baseline.nrrd baseline.nii.gz')
        else:
            t('ResampleVolume2 baseline.nrrd baseline.nii.gz')
        t('bet baseline.nii.gz baseline-masked.nii.gz -m -f '+betf)
        if magic:
            t('ConvertBetweenFileFormats baseline-masked_mask.nii.gz baselinemask.nrrd')
        else:
            t('ResampleVolume2 baseline-masked_mask.nii.gz baselinemask.nrrd')

    print '------------FA--------------'
    t('tend anvol -t -1 -a fa -i tensor.nrrd -o FA.nrrd')
    #t('DiffusionTensorMathematics tensor.nrrd FA.nrrd -e FractionalAnisotropy')
    t('unu 3op ifelse baselinemask.nrrd FA.nrrd 0 -o maskedFA.nrrd -t FLOAT')
    if magic:
        t('ConvertBetweenFileFormats maskedFA.nrrd fa.nii.gz float')
    else:
        t('unu convert -i maskedFA.nrrd -o magicFAtemp.nrrd -t float')
        t('ResampleVolume2 magicFAtemp.nrrd fa.nii.gz')
    t('fslswapdim fa RL PA IS fa')
    t('fslswapdim fa LR PA IS fa')
    t('cp fa.nii.gz '+FAmap)
 
    print '------------Axial --------------'
    t('tend eval -c 0 -i tensor.nrrd -o axial.nrrd')
    #t('DiffusionTensorMathematics tensor.nrrd axial.nrrd -e ParallelDiffusivity')
    t('unu 3op ifelse baselinemask.nrrd axial.nrrd 0 -o maskedAxial.nrrd -t FLOAT')
    if magic:
        t('ConvertBetweenFileFormats maskedAxial.nrrd axial.nii.gz float')
    else:
        t('unu convert -i maskedAxial.nrrd -o magicAxialTemp.nrrd -t float')
        t('ResampleVolume2 magicAxialTemp.nrrd axial.nii.gz')
    t('fslswapdim axial RL PA IS axial')
    t('fslswapdim axial LR PA IS axial')
    t('cp axial.nii.gz '+axial)

    print '------------Radial --------------'
    t('tend eval -c 1 -i tensor.nrrd -o l2.nrrd')
    t('tend eval -c 2 -i tensor.nrrd -o l3.nrrd')
    t('unu 2op + l2.nrrd l3.nrrd -o tempsum.nrrd -t FLOAT')
    t('unu 2op / tempsum.nrrd 2 -o radial.nrrd -t FLOAT')
    #t('DiffusionTensorMathematics tensor.nrrd radial.nrrd -e PerpendicularDffusivity')
    t('unu 3op ifelse baselinemask.nrrd radial.nrrd 0 -o maskedRadial.nrrd -t FLOAT')
    if magic:
        t('ConvertBetweenFileFormats maskedRadial.nrrd radial.nii.gz float')
    else:
        t('unu convert -i maskedRadial.nrrd -o magicRadialTemp.nrrd -t float')
        t('ResampleVolume2 magicRadialTemp.nrrd radial.nii.gz')

    t('fslswapdim radial RL PA IS radial')
    t('fslswapdim radial LR PA IS radial')
    t('cp radial.nii.gz '+radial)

    #t('unu 3op ifelse '+tensormask+' l2.nrrd 0 -o maskedL2.nrrd -t FLOAT')
    #t('DiffusionTensorMathematics tensor.nrrd l2.nrrd -e MidEigenvalue')
    #t('unu 3op ifelse '+tensormask+' l2.nrrd 0 -o maskedL2.nrrd -t FLOAT')
    #t('ConvertBetweenFileFormats maskedL2.nrrd l2.nii.gz FLOAT')
    #t('fslswapdim l2 RL PA IS l2')
    #t('fslswapdim l2 LR PA IS l2')
    #t('cp l2.nii.gz '+l2)

    #t('DiffusionTensorMathematics tensor.nrrd l3.nrrd -e MinEigenvalue')
    #t('unu 3op ifelse '+tensormask+' l3.nrrd 0 -o maskedL3.nrrd -t FLOAT')
    #t('ConvertBetweenFileFormats maskedL3.nrrd l3.nii.gz float')
    #t('fslswapdim l3 RL PA IS l3')
    #t('fslswapdim l3 LR PA IS l3')
    #t('cp l3.nii.gz '+l3)

    print '------------Trace --------------'
    t('tend anvol -t -1 -a tr -i tensor.nrrd -o trace.nrrd')
    #t('DiffusionTensorMathematics tensor.nrrd trace.nrrd -e Trace')
    t('unu 3op ifelse baselinemask.nrrd trace.nrrd 0 -o maskedTrace.nrrd -t FLOAT')
    if magic:
        t('ConvertBetweenFileFormats maskedTrace.nrrd trace.nii.gz float')
    else:
        t('unu convert -i maskedTrace.nrrd -o magicTraceTemp.nrrd -t float')
        t('ResampleVolume2 magicTraceTemp.nrrd trace.nii.gz')

    t('fslswapdim trace RL PA IS trace')
    t('fslswapdim trace LR PA IS trace')
    t('cp trace.nii.gz '+trace)

    print '------------Radial over Trace --------------'
    t('fslmaths radial.nii.gz -div trace.nii.gz radialOverTrace.nii.gz')
    t('fslswapdim radialOverTrace RL PA IS radialOverTrace')
    t('fslswapdim radialOverTrace LR PA IS radialOverTrace')
    t('cp radialOverTrace.nii.gz '+radialOverTrace)
    
    print '------------Axial over Trace --------------'
    t('fslmaths axial.nii.gz -div trace.nii.gz axialOverTrace.nii.gz')
    t('fslswapdim axialOverTrace RL PA IS axialOverTrace')
    t('fslswapdim axialOverTrace LR PA IS axialOverTrace')
    t('cp axialOverTrace.nii.gz '+axialOverTrace)

    t('cp baselinemask.nrrd '+nrrdmask)

    if magic:
        t('ConvertBetweenFileFormats baselinemask.nrrd mask.nii.gz')
    else:
        t('ResampleVolume2 baselinemask.nrrd mask.nii.gz')

    t('cp mask.nii.gz '+undimswappedmask)

    t('fslswapdim mask RL PA IS mask')
    t('fslswapdim mask LR PA IS mask')
    t('cp axialOverTrace.nii.gz '+mask)

    import time
    time.sleep(1)
    if not save_files:
        if '/tmp' in tmp:
            t('rm -rf '+tmp)
    else:
        print 'temp directory:', tmp
    os.chdir(oldcwd)

def CLI():
    import argparse
    parser = argparse.ArgumentParser(description="Creates scalar images for use with TBSS.  Either DWI or Tensor file and mask are required.")
    parser.add_argument('--DWI', default=None, help='DWI image from which to calculate scalar images')
    parser.add_argument('--mask', default=None, help='Brain mask to use on all output images')
    parser.add_argument('--tensor', default=None, help='Tensor file to use instead of estimating it from a DWI')
    parser.add_argument('--folder', default=None, help='Folder to create TBSS input files folders in')
    parser.add_argument('--name', default=None, help='What to call all output files (not including extension)')
    parser.add_argument('-v', '--verbose', default=False, action='store_true', help="Print all commands as they are run")
    parser.add_argument('-d', '--debug', default=False, action='store_true', help="Run code in a debugger")
    parser.add_argument('--save_files', default=False, action='store_true', help="Don't delete temp files")
    parser.add_argument('-f', '--betf', default='.3', help='bet (brain extraction tool) -f parameter to use; default is .3')
    parser.add_argument('--nomagic', default=False, action='store_true', help='bet (brain extraction tool) -f parameter to use; default is .3')

    args = parser.parse_args()

    if args.tensor:
        if not (args.DWI or args.mask):
            print 'In order to create the automatic mask, the DWI is required'
            exit(1)

    tbssprep(dwi=args.DWI, outputfolder=args.folder, tensorfile=args.tensor,
        tensormask=args.mask, outputname=args.name, verbose=args.verbose,
        save_files=args.save_files, betf=args.betf, magic=(not args.nomagic))

if __name__ == '__main__':
    CLI()

#from PNLTBSSprep import CLI
#CLI()

